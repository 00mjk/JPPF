<?xml version="1.0" encoding="UTF-8"?>
<!--
	Java Parallel Processing Framework.
   Copyright (C) 2005-2009 JPPF Team. 
  http://www.jppf.org

	This library is free software; you can redistribute it and/or modify it
	under the terms of the GNU Lesser General Public License as published by the
	Free Software Foundation; either version 2.1 of the License, or (at your
	option) any later version.

	This library is distributed in the hope that it will be useful, but WITHOUT
	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
	FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
	for more details.

	You should have received a copy of the GNU Lesser General Public License
	along with this library; if not, write to the Free Software Foundation,
	Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
-->
<opt:main xmlns:opt="http://www.jppf.org/Options.xsd" name="ColorSchemeEditor" type="page">

	<property name="label" value="Color Scheme Editor"/>
	<property name="scrollable" value="false"/>
	<property name="orientation" value="vertical"/>
	<property name="bordered" value="false"/>
	<property name="main" value="true"/>
	<property name="insets" value="0,0,0,0"/>
	<script language="javascript"><![CDATA[
		importPackage(Packages.java.lang);
		importPackage(Packages.java.util);
		importPackage(Packages.java.awt);
		importPackage(Packages.java.awt.event);
		importPackage(Packages.javax.swing);
		importPackage(Packages.org.jppf.client);
		importPackage(Packages.org.jppf.utils);
		importPackage(Packages.org.jppf.ui.utils.colorscheme);
		importPackage(Packages.org.jppf.ui.monitoring);
		importPackage(Packages.org.jppf.ui.options);
		importPackage(Packages.org.jppf.ui.options.event);
		importPackage(Packages.org.jppf.ui.options.factory);
		importPackage(Packages.org.jppf.ui.options.xml);
	]]></script>
	<initializer type="script">
		<script language="javascript"><![CDATA[
			var comp = option.getUIComponent();
			var frame = new JFrame(option.getLabel());
			wa = 
			{
				windowClosing: function(event)
				{
					System.exit(0);
				}
			};
			frame.addWindowListener(new WindowAdapter(wa));
			var BASE = "org.jppf.ui.i18n.StatsPage";
			frame.getContentPane().add(option.getUIComponent());
			frame.setSize(300, 280);
			frame.setVisible(true);
		]]></script>
	</initializer>

	<child name="Toolbar" type="Toolbar">
		<property name="label" value="Toolbar"/>
		<property name="tooltip" value=""/>
		<script language="javascript"><![CDATA[
			base = "org.jppf.ui.i18n";
			function refresh(text)
			{
				var builder = new OptionsPageBuilder();
				var bundlePath = LocalizationUtils.getLocalisationBase(base, option.findLastWithName("/OpenBtn").getValue());
				var page = builder.buildPageFromContent(text, bundlePath);
				var pp = option.findLastWithName("/PreviewPanel");
				var list = new ArrayList(pp.getChildren());
				for (var i=0; i<list.size(); i++) pp.remove(list.get(i));
				pp.add(page);
				pp.add(new FillerOption(1, 1));
				pp.getUIComponent().updateUI();
			}
	
			function message(text)
			{
				var msgPane = option.findLastWithName("/MsgPanel");
				var msg = msgPane.getValue();
				msgPane.setValue(msg + text + "\n");
			}
	
			function load(file)
			{
				if ((file != null) && !"".equals(file.trim()))
				{
					var text = FileUtils.readTextFile(file);
					refresh(text);
					option.findLastWithName("/Editor").setValue(text);
					Frame.getFrames()[0].setTitle("JPPF GUI Builder - "+file);
				}
			}
	
			function save(file)
			{
				if ((file != null) && !"".equals(file.trim()))
				{
					if (file.endsWith(".")) file = file + "csf";
					else if (!file.endsWith(".csf")) file = file + ".csf";
					var list = option.findLastWithName("/ColorList").getList();
					var text = "";
					var size = list.getModel().getSize();
					var i = 0;
					while (i < size)
					{
						var item = list.getModel().getElementAt(i);
						text = text + item.name + " = " + item.colorValue() + "\n";
						i = i + 1;
					}
					FileUtils.writeTextFile(file, text);
				}
			}
		]]></script>
	
		<child name="OpenBtn" type="FileChooser">
			<property name="icon" value="/org/jppf/ui/resources/open.gif"/>
			<property name="tooltip" value="Loads an XML document"/>
			<property name="value" value="."/>
			<property name="extensions" value="csf; Color Scheme Files (*.csf)"/>
			<property name="orientation" value="vertical"/>
			<property name="type" value="open"/>
			<!--
			<initializer type="script">
				<script language="javascript"><![CDATA[ load(); ]]></script>
			</initializer>
			-->
			<listener type="script">
				<script language="javascript"><![CDATA[
					load(option.getValue());
					option.findLastWithName("/SaveBtn").setValue(option.getValue());
					]]></script>
			</listener>
		</child>
	
		<child name="SaveBtn" type="Button">
			<property name="tooltip" value="Save the current document"/>
			<property name="icon" value="/org/jppf/ui/resources/save.gif"/>
			<listener type="script">
				<script language="javascript"><![CDATA[
					var file = option.findLastWithName("/OpenBtn").getValue();
					if ((file != null) && !"".equals(file.trim())) save(file);
					else option.findLastWithName("/SaveAsBtn").doChooseFile();
				]]></script>
			</listener>
		</child>
	
		<child name="SaveAsBtn" type="FileChooser">
			<property name="icon" value="/org/jppf/ui/resources/saveas.gif"/>
			<property name="tooltip" value="Save the current document under a different name"/>
			<property name="value" value="."/>
			<property name="extensions" value="csf; Color Scheme Files (*.csf)"/>
			<property name="orientation" value="vertical"/>
			<property name="type" value="save"/>
			<listener type="script">
				<script language="javascript"><![CDATA[
					var file = option.getValue();
					if ((file != null) && !"".equals(file.trim()))
					{
						save(file);
						Frame.getFrames()[0].setTitle("Color Scheme Editor - "+file);
						option.findLastWithName("/OpenBtn").setValue(option.getValue());
					}
					]]></script>
			</listener>
		</child>
	
		<child name="filler" type="ToolbarSeparator">
			<property name="width" value="10"/>
			<property name="height" value="1"/>
		</child>
	
	</child>

	<!-- ===================================================================== -->
	<!--                    Server Chooser Panel                               -->
	<!-- ===================================================================== -->

	<child name="Colors" type="page">
	
		<property name="label" value=""/>
		<property name="scrollable" value="false"/>
		<property name="orientation" value="horizontal"/>
		<property name="bordered" value="false"/>
		<property name="main" value="false"/>
		<property name="tooltip" value="configure the colors"/>
	
		<child name="ColorList" type="List">
			<property name="label" value="Configure the colors"/>
			<property name="orientation" value="horizontal"/>
			<property name="tooltip" value="The list of color items"/>
			<property name="scrollable" value="true"/>
			<property name="bordered" value="true"/>
			<property name="value" value=""/>
			<property name="selection" value="single"/>
			<property name="width" value="120"/>
			<property name="height" value="200"/>
			<initializer type="script">
				<script language="javascript"><![CDATA[
					var scheme = new JPPFColorScheme();
					var items = new ArrayList();
					items.add(new ColorItem("foreground", scheme.getForegroundColor()));
					items.add(new ColorItem("ultra light", scheme.getUltraLightColor()));
					items.add(new ColorItem("extra light", scheme.getExtraLightColor()));
					items.add(new ColorItem("light", scheme.getLightColor()));
					items.add(new ColorItem("mid", scheme.getMidColor()));
					items.add(new ColorItem("dark", scheme.getDarkColor()));
					items.add(new ColorItem("ultra dark", scheme.getUltraDarkColor()));
					option.setItems(items);
					root.setEventsEnabled(false);
					var list = option.getList();
					list.setCellRenderer(new JPPFListCellRenderer());
					list.addMouseListener(new ColorItemListMouseAdapter(list));
					root.setEventsEnabled(true);
				]]></script>
			</initializer>
		</child>
	
	</child>

</opt:main>
