/*
 * JPPF.
 * Copyright (C) 2005-2012 JPPF Team.
 * http://www.jppf.org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jppf.utils.compilation;

import java.io.*;
import java.util.*;

import javax.tools.*;

/**
 * 
 * @author Laurent Cohen
 */
public class SourceCompiler implements Closeable
{
  /**
   * The kind of ouput from the compiler.
   */
  private final CompilationOutputKind kind;
  /**
   * The java compiler.
   */
  private final JavaCompiler compiler;
  /**
   * The file manager used to store the destination class "files".
   */
  private final JavaFileManager fileManager;

  /**
   * Initialize a SourceCompiler of the specified kind.
   * @param kind the kind of output generated by the file manager.
   * @throws UnsupportedOperationException if no compiler is available for this platform.
   */
  public SourceCompiler(final CompilationOutputKind kind) throws UnsupportedOperationException
  {
    compiler = ToolProvider.getSystemJavaCompiler();
    if (compiler == null) throw new UnsupportedOperationException("no compiler is available for this platform");
    this.kind = kind;
    this.fileManager = kind.getFileManager(compiler);
  }

  /**
   * Compile the specified sources to the file system.
   * @param sources a mapping of class names to their source code.
   * @param classesDir the root directory where the classes are stored.
   * For instance, if a class <code>mypackage.MyClass</code> is compiled,
   * the resulting class file will be at <code><i>classesDir</i>/mypackage/MyClass.class</code>.
   * @throws Exception if any error occurs.
   */
  public void compileToFile(final Map<String, CharSequence> sources, final File classesDir) throws Exception {
    List<File> files = new ArrayList<File>();
    files.add(classesDir);
    ((StandardJavaFileManager) fileManager).setLocation(StandardLocation.CLASS_OUTPUT, files);
    List<JavaFileObject> sourceObjects = new ArrayList<JavaFileObject>();
    for (Map.Entry<String, CharSequence> entry: sources.entrySet()) {
      sourceObjects.add(new CharSequenceSource(entry.getKey(), entry.getValue()));
    }
    Boolean b = compiler.getTask(null, fileManager, null, null, null, sourceObjects).call();
    output("compilation result = " + b);
  }

  /**
   * Compile the specified source to a file.
   * @param sources a mapping of class names to their source code.
   * @return a mapping of the class names to their generated bytecode.
   * @throws Exception if any error occurs.
   */
  public Map<String, byte[]> compileToMemory(final Map<String, CharSequence> sources) throws Exception {
    List<JavaFileObject> sourceObjects = new ArrayList<JavaFileObject>();
    for (Map.Entry<String, CharSequence> entry: sources.entrySet()) {
      sourceObjects.add(new CharSequenceSource(entry.getKey(), entry.getValue()));
    }
    Boolean b = compiler.getTask(null, fileManager, null, null, null, sourceObjects).call();
    output("compilation result = " + b);
    Map<String, byte[]> result = ((InMemoryFileManager) fileManager).getAllByteCodes();
    return result;
  }

  /**
   * Print a message to the console and/or log file.
   * @param message the message to print.
   */
  public static void output(final String message) {
    System.out.println(message);
  }

  /**
   * Close this source compiler and its associated file manager.
   * @throws IOException if any I/O error occurs.
   */
  @Override
  public void close() throws IOException {
    if (fileManager != null) fileManager.close();
  }
}
