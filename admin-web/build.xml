<!--
  JPPF
  Copyright (C) 2005-2017 JPPF Team. 
  http://www.jppf.org

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<project name="WebAdminConsole" default="build" basedir="." xmlns:artifact="antlib:org.apache.maven.artifact.ant" xmlns:if="ant:if" xmlns:unless="ant:unless">

  <!-- ==================================================================== -->
  <!-- Property definitions                                                 -->
  <!-- ==================================================================== -->

  <property file="${basedir}/bin/build.properties"/>
  <property file="${basedir}/build.properties"/>
  <property file="${basedir}/bin/build.number"/>
  <property name="build.sysclasspath" value="last" />
  <property name="config.dir"         value="${basedir}/config"/>
  <property name="classes.dir"        value="${basedir}/classes"/>
  <property name="src.dir"            value="${basedir}/src" />
  <property name="build.dir"          value="${basedir}/build"/>
  <property name="lib.dir"            value="${basedir}/lib"/>
  <property name="web.dir"            value="${basedir}/webapp"/>
  <property name="javadoc"            value="${build.dir}/javadoc"/>
  <property name="maven.dist"         value="${build.dir}"/>
  <property name="module.name"        value="jppf-admin-web"/>
  <property name="war.name"           value="${module.name}-${version.number}"/>

  <!-- ==================================================================== -->
  <!-- Classpath definitions                                                -->
  <!-- ==================================================================== -->

  <path id="project.classpath">
    <pathelement location="${classes.dir}"/>
    <fileset dir="${lib.dir}" includes="*.jar"/>
  </path>

  <!-- ==================================================================== -->
  <!-- Init                                                                 -->
  <!-- ==================================================================== -->

  <target name="init" depends="clean, prep, dependencies">
    <mkdir dir="${classes.dir}"/>
    <mkdir dir="${build.dir}"/>
    <tstamp>
      <format property="readable.now" pattern="yyyy-MM-dd hh:mm z"/>
    </tstamp>
    <path id="checkstyle.path">
      <fileset dir="${lib.dir}/build" includes="*.jar"/>
    </path>
    <taskdef resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties" classpathref="checkstyle.path"/>
    <path id="maven-ant-tasks.classpath" path="${lib.dir}/build/maven-ant-tasks-2.1.3.jar"/>
    <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="antlib:org.apache.maven.artifact.ant" classpathref="maven-ant-tasks.classpath"/>
  </target>

  <!-- ==================================================================== -->
  <!-- Clean                                                                -->
  <!-- ==================================================================== -->

  <target name="clean">
    <delete quiet="true">
      <fileset dir="${classes.dir}" includes="**/*.*"/>
    </delete>
    <delete quiet="true">
      <fileset dir="${build.dir}" includes="**/*.*"/>
    </delete>
  </target>

  <!-- ==================================================================== -->
  <!-- Prep                                                                 -->
  <!-- ==================================================================== -->
  
  <target name="prep">
    <condition property="cmd.ext" value=".bat" else=".sh">
      <os family="windows"/>
    </condition>
    <condition property="wls.ext" value=".cmd" else=".sh">
      <os family="windows"/>
    </condition>
  </target>

  <import file="bin/build-libs.xml"/>

  <!-- ==================================================================== -->
  <!-- Compile the application                                              -->
  <!-- ==================================================================== -->

  <target name="compile" depends="init">
    <echo message="compiling the JPPFWebAdmin classes ..." />
    <checkstyle config="${basedir}/bin/CheckStyle_JPPF_config.xml">
      <fileset dir="${src.dir}" includes="**/*.java" />
    </checkstyle>
    <javac srcdir="" destdir="${classes.dir}" source="1.7" target="1.7" debug="on" deprecation="off" optimize="on" includes="**/*.java" createMissingPackageInfoClass="false">
      <classpath refid="project.classpath" />
      <compilerarg line="-Xlint:none" />
      <src path="${src.dir}/java" />
    </javac>
    <copy todir="${classes.dir}">
      <fileset dir="${src.dir}/java">
        <exclude name="**/*.java" />
      </fileset>
      <fileset dir="${src.dir}/resources">
        <exclude name="**/*.java" />
      </fileset>
    </copy>
  </target>

  <!-- =====================================================================-->
  <!-- Generate the WAR file                                                -->
  <!-- =====================================================================-->

  <target name="war" depends="compile">
    <echo message="creating the ${war.name}.war WAR file..."/>
    <war warfile="${build.dir}/${war.name}.war" webxml="${web.dir}/WEB-INF/web.xml">
      <manifest>
        <attribute name="JPPF-Version" value="${version.number}"/>
        <attribute name="JPPF-Build" value="${build.number}" />
        <attribute name="JPPF-BuildDate" value="${readable.now}"/>
      </manifest>
      <classes dir="${classes.dir}"/>
      <lib dir="${lib.dir}">
        <include name="*.jar"/>
        <exclude name="checkstyle*.jar"/>
        <exclude name="hibernate*.jar"/>
        <exclude name="*jetty*.jar"/>
        <exclude name="*spring*.jar"/>
        <exclude name="*atmosphere*.jar"/>
        <exclude name="*guice*.jar"/>
        <exclude name="javax.servlet*.jar"/>
        <exclude name="maven*.jar"/>
      </lib>
      <fileset dir="${basedir}/webapp" excludes="WEB-INF/web.xml"/>
    </war>
    <echo message="${war.name}.war file created in '${build.dir}' directory"/>
  </target>

  <!-- =====================================================================-->
  <!-- Repackage the WAR file by adding jar files to its WEB-INF/lib folder -->
  <!-- =====================================================================-->
  
  <!--
    Usage: ant -Ddir=<root_jars_directory> -Djars="<include_patterns>" war.update
  -->
  <target name="war.update" depends="">
    <echo message="creating the ${war.name}.war WAR file..."/>
    <update.war srcdir="${dir}" includes="${jars}"/>
    <echo message="${war.name}.war file updated in '${build.dir}' directory"/>
  </target>

  <!--
    Add one or more jars in the .war file's WEB-INF/lib directory.
    Parameters:
      - dest: the war file to update, defaults to './build/jppf-admin-web-<jppf-version>.war'
      - srcdir: the root directory from which to get the jars, defaults to '.'
      - includes: one or more comma-spearted Ant include patterns, relative to srcdir
        example: "lib1/*.jar,**/my*.jar"
  -->
  <macrodef name="update.war">
    <attribute name="dest" default="${build.dir}/${war.name}.war"/>
    <attribute name="srcdir" default="${basedir}"/>
    <attribute name="includes"/>
    <sequential>
      <echo message="updating war with dest=@{dest}, dir=@{srcdir}, includes=@{includes}"/>
      <war warfile="@{dest}" update="true" needxmlfile="false">
        <lib dir="@{srcdir}" includes="@{includes}"/>
      </war>
    </sequential>
  </macrodef>

  
  <!-- ========================================================================= -->
  <!-- Generate the Maven artifacts                                              -->
  <!-- ========================================================================= -->

  <target name="maven" depends="maven.init, jar, maven.generate" description=""/>
  
  <target name="maven.init" depends="">
    <echoprop name="maven.staging"/>
    <echoprop name="maven.nopublish"/>
    <delete dir="${maven.dist}" quiet="true" includes="*.jar,pom.xml"/>
    <mkdir dir="${maven.dist}"/>
    <property file="${user.home}/gpg-passphrase.txt"/>
    <!-- defined maven snapshots and staging repository id and url -->
    <property name="maven-snapshots-repository-id" value="sonatype-nexus-snapshots" />
    <property name="maven-snapshots-repository-url" value="https://oss.sonatype.org/content/repositories/snapshots" />
    <property name="maven-staging-repository-id" value="sonatype-nexus-staging" />
    <property name="maven-staging-repository-url" value="https://oss.sonatype.org/service/local/staging/deploy/maven2/" />
    <property name="pom.file" value="${maven.dist}/pom.xml"/>
  </target>
  
  <target name="maven.generate" depends="">
    <property name="artifactId" value="${module.name}"/>
    <local name="artifact.prefix"/>
    <property name="artifact.prefix" value="${artifactId}-${version.number}"/>
    <echoprop name="artifact.prefix"/>
    <copy file="${basedir}/pom.xml" toFile="${pom.file}"/>
    <local name="maven.version"/>
    <property name="maven.version" value="${version.number}-SNAPSHOT" unless:true="${maven.staging}"/>
    <property name="maven.version" value="${version.number}" if:true="${maven.staging}"/>
    <replace file="${pom.file}" token="@version@" value="${maven.version}"/>
    <echo message="maven-jar = ${maven.dist}/${artifact.prefix}"/>
    <antcall target="publish.maven.snapshot" unless:true="${maven.staging}"><param name="maven-jar" value="${maven.dist}/${artifact.prefix}"/></antcall>
    <antcall target="publish.maven.staging" if:true="${maven.staging}"><param name="maven-jar" value="${maven.dist}/${artifact.prefix}"/></antcall>
  </target>
  
  <target name="publish.maven.snapshot" depends="">
    <echo message="deploying ${maven-jar} to SNAPSHOT repository !!!"/>
    <copy file="${maven-jar}.war" toFile="${maven-jar}-SNAPSHOT.war"/>
    <copy file="${maven-jar}-sources.jar" toFile="${maven-jar}-SNAPSHOT-sources.jar"/>
    <copy file="${maven-jar}-javadoc.jar" toFile="${maven-jar}-SNAPSHOT-javadoc.jar"/>
    <artifact:mvn failonerror="true" unless:true="${maven.nopublish}">
      <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file" />
      <arg value="-Durl=${maven-snapshots-repository-url}" />
      <arg value="-DrepositoryId=${maven-snapshots-repository-id}" />
      <arg value="-DpomFile=${pom.file}"/>
      <arg value="-Dfile=${maven-jar}.war"/>
      <arg value="-Dpackaging=war"/>
      <arg value="-Dsources=${maven-jar}-sources.jar"/>
      <arg value="-Djavadoc=${maven-jar}-javadoc.jar"/>
      <arg value="-Pgpg" />
    </artifact:mvn>
    <delete dir="${maven.dist}" quiet="true" includes="**/*SNAPSHOT*.*"/>
  </target>
  
  <target name="publish.maven.staging" depends="">
    <echo message="deploying ${maven-jar} to STAGING repository !!!"/>
    <artifact:mvn failonerror="true" unless:true="${maven.nopublish}">
      <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file" />
      <arg value="-Durl=${maven-staging-repository-url}" />
      <arg value="-DrepositoryId=${maven-staging-repository-id}" />
      <arg value="-DpomFile=${pom.file}"/>
      <arg value="-Dfile=${maven-jar}.war"/>
      <arg value="-Dpackaging=war"/>
      <arg value="-Dsources=${maven-jar}-sources.jar"/>
      <arg value="-Djavadoc=${maven-jar}-javadoc.jar"/>
      <arg value="-Pgpg" />
    </artifact:mvn>
  </target>
  
  <target name="gpg.sign" depends="">
    <exec executable="gpg">
      <arg value="--yes"/>
      <arg value="--passphrase"/>
      <arg value="${gpg.pass}"/>
      <arg value="--armor"/>
      <arg value="--detach-sign"/>
      <arg value="${file.sign}"/>
    </exec>
  </target>
  
  <!-- ========================================================================= -->
  <!-- Jar                                                                       -->
  <!-- ========================================================================= -->
  
  <target name="jar" depends="war, javadoc">
    <tstamp><format property="readable.now" pattern="yyyy-MM-dd hh:mm z"/></tstamp>
    <jar.all type="-sources" dir="${src.dir}"/>
    <jar.all type="-javadoc" dir="${javadoc}"/>
  </target>
  
  <macrodef name="jar.all">
    <attribute name="type"/>
    <attribute name="dir"/>
    <sequential>
      <jar jarfile="${build.dir}/${war.name}@{type}.jar" index="true">
        <fileset dir="@{dir}"/>
        <manifest>
          <attribute name="Version" value="${version.number}"/>
          <attribute name="BuildDate" value="${readable.now}"/>
        </manifest>
      </jar>
      <echo message="*** ${build.dir}/${war.name}@{type}.jar ready ***"/>
    </sequential>
  </macrodef>

  <!-- ========================================================================= -->
  <!-- Generate the Javadoc                                                      -->
  <!-- ========================================================================= -->
  
  <target name="javadoc">
    <delete dir="${javadoc}" quiet="true"/>
    <mkdir dir="${javadoc}"/>
    <javadoc destdir="${javadoc}" access="protected" Windowtitle="JPPF-JMX-Remote"
      packagenames="**/*.*" classpathref="project.classpath" stylesheetfile="${basedir}/bin/stylesheet.css" verbose="false" use="true" additionalparam="-quiet"
    >
      <arg value="-J-Xmx512m"/>
      <packageset dir="${src.dir}/java"/>
      <link href="https://docs.oracle.com/javase/7/docs/api/"/>
      <link href="https://ci.apache.org/projects/wicket/apidocs/7.x/"/>
      <link href="https://docs.oracle.com/javaee/6/api/"/>
      <doctitle><![CDATA[JPPF Web Administration Console v${version.number}]]></doctitle>
      <header>
        <![CDATA[
          <table>
          <tr>
            <td valign="center">
              <a href="https://www.jppf.org" target="_top">
                <img src="https://www.jppf.org/images/jppf_group_large.gif" border="0"/>
              </a>
            </td>
          </tr>
          </table>
        ]]>
      </header>
      <bottom>
        <![CDATA[
          <font face="Arial" size=2 color="#808080"><i>Copyright &copy; 2018 JPPF Team.</i></font>
        ]]>
      </bottom>
    </javadoc>
    <copy todir="${javadoc}/resources" overwrite="true">
      <fileset dir="${basedir}/bin">
        <include name="*.gif"/>
        <include name="*.jpg"/>
      </fileset>
    </copy>
    <property name="javadoc.file" value="${jppf}/build/JPPFWebAdmin-${version.number}-javadoc.jar"/>
    <delete file="${javadoc.file}" quiet="true"/>
  </target>

  <!-- ==================================================================== -->
  <!-- Build everything                                                     -->
  <!-- ==================================================================== -->

  <target name="build" depends="war"/>
  <target name="build.deploy.tomcat" depends="build, tomcat.deploy"/>
  <target name="tomcat.build.deploy.start" depends="build, tomcat.deploy, tomcat.start" description="generate and deploy the war file and start Tomcat"/>
  <target name="wildfly.build.deploy.start" depends="build, wildfly.deploy, wildfly.start" description="generate and deploy the war file and start Wildfly"/>
  <target name="glassfish.build.deploy.start" depends="build, glassfish.start, glassfish.deploy" description="generate and deploy the war file and start Glassfish"/>
  <target name="liberty.build.deploy.start" depends="build, liberty.deploy, liberty.start" description="generate and deploy the war file and start Liberty"/>
  <target name="weblogic.build.deploy.start" depends="build, weblogic.deploy, weblogic.start" description="generate and deploy the war file and start Weblogic"/>

  <!-- ========================================================================= -->
  <!--  Macrodef utilities                                                       -->
  <!-- ========================================================================= -->
  
  <!--
    Display the name and value of a property in the form "name = value".
    Parameters:
      - propname: the name of the property to display to the output console
  -->
  <macrodef name="echoprop">
  <attribute name="name"/>
    <sequential>
      <echo message="@{name} = ${@{name}}"/>
    </sequential>
  </macrodef>

  <!-- =====================================================================-->
  <!-- Deployment and start/stop of various servers                         -->
  <!-- =====================================================================-->

  <!-- Tomcat deployment -->

  <target name="tomcat.deploy">
    <property name="tomcat.deploy.dir" value="${tomcat.dir}/webapps"/>
    <copy todir="${tomcat.deploy.dir}" file="${build.dir}/${war.name}.war"/>
  </target>

  <target name="tomcat.start" depends="prep">
    <exec executable="${tomcat.dir}/bin/startup${cmd.ext}" dir="${tomcat.dir}/bin" failonerror="true" searchpath="true">
    </exec>
  </target>

  <!-- Glassfish deployment -->
  
  <target name="glassfish.deploy" depends="prep">
    <exec executable="${glassfish.dir}/bin/asadmin${cmd.ext}" dir="${glassfish.dir}/bin" failonerror="true" searchpath="true">
      <arg value="deploy"/>
      <arg value="--force=true"/>
      <arg value="${build.dir}/${war.name}.war"/>
    </exec>
    <echo message="waiting for JPPFWebAdmin to be ready" />
    <waitfor maxwait="1" maxwaitunit="minute" checkevery="1" checkeveryunit="second">
      <http url="http://localhost:8080/JPPFWebAdmin"/>
    </waitfor>
  </target>
  
  <target name="glassfish.start" depends="prep">
    <delete quiet="true">
      <fileset dir="${glassfish.domain.dir}/config" includes="*.log" />
    </delete>
    <delete quiet="true">
      <fileset dir="${glassfish.domain.dir}/logs" includes="*.log" />
    </delete>
    <glassfish action="start"/>
    <echo message="waiting for web container to be ready" />
    <waitfor maxwait="1" maxwaitunit="minute" checkevery="1" checkeveryunit="second">
      <http url="http://localhost:8080/index.html"/>
    </waitfor>
  </target>
  
  <target name="glassfish.stop" depends="prep" description="stop glassfish">
    <glassfish action="stop"/>
  </target>

  <!-- Wildfly deployment -->
  
  <target name="wildfly.deploy" depends="prep">
    <copy todir="${wildfly.deploy.dir}" file="${build.dir}/${war.name}.war" />
  </target>
  
  <target name="wildfly.start" depends="prep">
    <exec executable="${wildfly.dir}/bin/${wildfly.server}${cmd.ext}" dir="${wildfly.dir}/bin" failonerror="true" searchpath="true" vmlauncher="false" spawn="true"/>
  </target>
  
  <target name="wildfly.stop" description="stop wildfly" depends="prep">
    <exec executable="${wildfly.dir}/bin/jboss-cli${cmd.ext}" dir="${wildfly.dir}/bin" failonerror="true" searchpath="true">
      <arg value="--connect"/>
      <arg value="controller=127.0.0.1:9990"/>
      <arg value="command=:shutdown"/>
    </exec>
  </target>

  <!-- Liberty deployment -->

  <target name="liberty.deploy" depends="prep">
    <copy todir="${liberty.server.dir}/apps" file="${build.dir}/${war.name}.war" />
  </target>

  <target name="liberty.start" depends="prep">
    <delete quiet="true">
      <fileset dir="${liberty.server.dir}" includes="**/*.log" />
    </delete>
    <liberty action="start"/>
  </target>

  <target name="liberty.stop" description="stop liberty" depends="prep">
    <liberty action="stop"/>
  </target>

  <!-- Weblogic deployment -->
  
  <target name="weblogic.deploy" depends="prep">
    <copy todir="${weblogic.domain.dir}/autodeploy" file="${build.dir}/${war.name}.war" />
  </target>
  
  <target name="weblogic.start" depends="prep">
    <delete quiet="true">
      <fileset dir="${weblogic.domain.dir}" includes="**/*.log,**/logs/*.log*"/>
    </delete>
    <weblogic action="start"/>
  </target>
  
  <target name="weblogic.stop" description="stop Weblogic" depends="prep">
    <weblogic action="stop"/>
  </target>

  <!-- =============================================================================
    Start or stop the Liberty server
    Attributes:
    - action: either "start" or "stop"
    - servername: name of the liberty server, defaults to "jppf"
  ============================================================================== -->
  <macrodef name="liberty">
    <attribute name="action"/>
    <attribute name="servername" default="jppf"/>
    <sequential>
      <exec executable="${liberty.dir}/bin/server${cmd.ext}" dir="${liberty.dir}/bin" failonerror="true" searchpath="true">
        <arg value="@{action}"/>
        <arg value="@{servername}"/>
      </exec>
    </sequential>
  </macrodef>
  
  <!-- =============================================================================
    Start or stop the Glassfish server
    Attributes:
    - action: either "start" or "stop"
    - domain: name of the glassfish domain, defaults to "jppf"
  ============================================================================== -->
  <macrodef name="glassfish">
    <attribute name="action"/>
    <attribute name="domain" default="jppf"/>
    <sequential>
      <exec executable="${glassfish.dir}/bin/asadmin${cmd.ext}" dir="${glassfish.dir}/bin" failonerror="true" searchpath="true">
        <arg value="@{action}-domain"/>
        <arg value="@{domain}"/>
      </exec>
    </sequential>
  </macrodef>

  <!-- =============================================================================
    Start or stop the Weblogic server
    Attributes:
    - action: either "start" or "stop"
  ============================================================================== -->
  <macrodef name="weblogic">
    <attribute name="action"/>
    <sequential>
      <exec executable="${weblogic.domain.dir}/bin/@{action}Weblogic${wls.ext}" dir="${weblogic.domain.dir}/bin" failonerror="true" searchpath="true"/>
    </sequential>
  </macrodef>

</project>
