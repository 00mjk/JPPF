<!--
  JPPF
  Copyright (C) 2005-2019 JPPF Team. 
  http://www.jppf.org

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<!--
<project name="JPPF-Maven" basedir="..">
-->
<project name="JPPF-Maven" basedir=".." xmlns:artifact="antlib:org.apache.maven.artifact.ant" xmlns:if="ant:if" xmlns:unless="ant:unless">

  <!-- ========================================================================= -->
  <!--                     Build the maven artifacts                             -->
  <!-- ========================================================================= -->

  <target name="maven.artifacts" depends="maven.generate" description=""/>

  <!--
    The GPG pass phrase must be stored in a properties file named 'gpg-passphrase.txt'
    located in the user's home directory, e.g. /home/<user> on Linux, C:\users\<user> on Windows.
    The passphrase itself is defined as a property: gpg.pass = <passphrase>
  -->
  <target name="maven.init" depends="">
    <path id="maven-ant-tasks.classpath" path="${lib}/maven/maven-ant-tasks-2.1.3.jar"/>
    <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="antlib:org.apache.maven.artifact.ant" classpathref="maven-ant-tasks.classpath"/>
    <echoprop name="maven.staging"/>
    <echoprop name="maven.nopublish"/>
    <property name="maven.dist" value="${build}/maven"/>
    <echoprop name="maven.dist"/>
    <delete dir="${maven.dist}" quiet="true"/>
    <mkdir dir="${maven.dist}"/>
    <loadfile property="jppf.maven.header" srcFile="${bin}/maven/pom-header.xml"/>
    <loadfile property="jppf.maven.common" srcFile="${bin}/maven/pom-common.xml"/>
    <property file="${user.home}/gpg-passphrase.txt"/>
    <!-- defined maven snapshots and staging repository id and url -->
    <property name="maven-snapshots-repository-id" value="sonatype-nexus-snapshots" />
    <property name="maven-snapshots-repository-url" value="https://oss.sonatype.org/content/repositories/snapshots" />
    <property name="maven-staging-repository-id" value="sonatype-nexus-staging" />
    <property name="maven-staging-repository-url" value="https://oss.sonatype.org/service/local/staging/deploy/maven2/" />
    <property name="pom.file" value="${maven.dist}/pom.xml"/>
  </target>

  <target name="maven.generate" depends="maven.init">
    <maven.artifacts.module module="${common}" file="common"/>
    <maven.artifacts.module module="${node}" file="node"/>
    <maven.artifacts.module module="${jmxremote-nio}" file="jmxremote-nio"/>
    <maven.artifacts.module module="${client}" file="client"/>
    <maven.artifacts.module module="${server}" file="server"/>
    <maven.artifacts.module module="${admin}" file="admin"/>
  </target>

  <!-- ========================================================================= -->
  <!-- Generate the jar, src jar, javadoc jar, pom.xml and their gpg signatures  -->
  <!-- ========================================================================= -->

  <macrodef name="maven.artifacts.module">
    <attribute name="module"/>
    <attribute name="file" default="@{module}"/>
    <sequential>
      <local name="artifactId"/>
      <property name="artifactId" value="jppf-@{file}"/>
      <echoprop name="artifactId"/>
      <local name="maven.dist.javadoc"/>
      <property name="maven.dist.javadoc" value="${maven.dist}/${artifactId}-api"/>
      <echoprop name="maven.dist.javadoc"/>
      <delete dir="${maven.dist.javadoc}" quiet="true"/>
      <waitfor maxwait="5000" maxwaitunit="millisecond">
        <not><available file="${maven.dist.javadoc}" type="dir"/></not>
      </waitfor>
      <mkdir dir="${maven.dist.javadoc}"/>
      <local name="maven.version"/>
      <property name="maven.version" value="${version.number}-SNAPSHOT" unless:true="${maven.staging}"/>
      <property name="maven.version" value="${version.number}" if:true="${maven.staging}"/>
      <local name="artifact.prefix"/>
      <property name="artifact.prefix" value="${artifactId}-${maven.version}"/>
      <echoprop name="artifact.prefix"/>
      <!-- generate the javadoc -->
      <javadoc destdir="${maven.dist.javadoc}" access="protected" Windowtitle="JPPF"
        packagenames="**/*.*" classpathref="javadoc.classpath" stylesheetfile="${bin}/stylesheet.css" verbose="false" use="true" additionalparam="-quiet"
        doclet="org.jppf.javadoc.ExcludeDoclet" docletpath="${basedir}/classes">
        <arg value="-J-Xmx512m"/>
        <packageset dir="@{module}/src/java"/>
        <link href="https://docs.oracle.com/javase/8/docs/api/"/>
        <link href="https://docs.oracle.com/javaee/6/api/"/>
        <link href="http://xstream.codehaus.org/javadoc"/>
        <link href="http://www.jppf.org/javadoc/6.0"/>
        <doctitle><![CDATA[JPPF v${version.number}]]></doctitle>
        <header><![CDATA[<table><tr><td valign="center">
            <a href="http://www.jppf.org" target="_top"><img src="http://www.jppf.org/images/jppf_group_large.gif" border="0"/></a>
          </td></tr></table>]]>
        </header>
        <bottom><![CDATA[<font face="Arial" size=2 color="#C0C0C0"><i>Copyright &copy; 2005-2019 JPPF Team.</i></font>]]></bottom>
      </javadoc>
      <copy todir="${maven.dist.javadoc}/resources" overwrite="true">
        <fileset dir="${bin}">
          <include name="*.gif"/>
          <include name="*.jpg"/>
        </fileset>
      </copy>
      <favicon dir="${maven.dist.javadoc}"/>
      <local name="javadoc.file"/>
      <property name="javadoc.file" value="${maven.dist}/${artifact.prefix}-javadoc.jar"/>
      <delete file="${javadoc.file}" quiet="true"/>
      <jar jarfile="${javadoc.file}"><fileset dir="${maven.dist.javadoc}" /></jar>
      <delete dir="${maven.dist.javadoc}" quiet="true"/>
      <delete file="${pom.file}" quiet="true"/>
      <copy file="${build}/jppf-@{file}-${version.number}.jar" toFile="${maven.dist}/${artifact.prefix}.jar"/>
      <copy file="${build}/jppf-@{file}-src-${version.number}.jar" toFile="${maven.dist}/${artifact.prefix}-sources.jar"/>
      <copy toFile="${pom.file}" file="${bin}/maven/jppf-@{file}.xml"/>
      <replace file="${pom.file}" token="@version@" value="${maven.version}"/>
      <replace file="${pom.file}">
        <replacefilter token="@header@" value="${jppf.maven.header}"/>
        <replacefilter token="@common@" value="${jppf.maven.common}"/>
        <replacefilter token="@module@" value="@{file}"/>
        <replacefilter token="@version@" value="${maven.version}"/>
      </replace>
      <jar jarfile="${maven.dist}/@{file}-bundle.jar">
        <fileset dir="${maven.dist}" includes="jppf-@{file}*.*,pom.xml"/>
      </jar>
      <maven.install file.prefix="${maven.dist}/${artifact.prefix}" pom="${pom.file}"/>
      <antcall target="publish.maven.snapshot" unless:true="${maven.staging}"><param name="maven-jar" value="${maven.dist}/${artifact.prefix}"/></antcall>
      <antcall target="publish.maven.staging" if:true="${maven.staging}"><param name="maven-jar" value="${maven.dist}/${artifact.prefix}"/></antcall>
      <delete dir="${maven.dist}" quiet="true" includes="**/*.*"/>
    </sequential>
  </macrodef>

  <macrodef name="maven.install">
    <attribute name="file.prefix"/>
    <attribute name="pom"/>
    <attribute name="packaging" default="jar"/>
    <sequential>
      <artifact:install file="@{file.prefix}.@{packaging}">
        <pom file="@{pom}"/>
        <attach file="@{file.prefix}-sources.jar" type="jar" classifier="sources"/>
        <attach file="@{file.prefix}-javadoc.jar" type="jar" classifier="javadoc"/>
      </artifact:install>
    </sequential>
  </macrodef>

  <target name="publish.maven.snapshot" depends="">
    <echo message="deploying ${maven-jar} to SNAPSHOT repository !!!"/>
    <artifact:mvn failonerror="true" unless:true="${maven.nopublish}">
      <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file" />
      <arg value="-Durl=${maven-snapshots-repository-url}" />
      <arg value="-DrepositoryId=${maven-snapshots-repository-id}" />
      <arg value="-DpomFile=${pom.file}"/>
      <arg value="-Dfile=${maven-jar}.jar"/>
      <arg value="-Dsources=${maven-jar}-sources.jar"/>
      <arg value="-Djavadoc=${maven-jar}-javadoc.jar"/>
      <arg value="-Pgpg" />
    </artifact:mvn>
  </target>

  <target name="publish.maven.staging" depends="">
    <echo message="deploying ${maven-jar} to STAGING repository !!!"/>
    <artifact:mvn failonerror="true" unless:true="${maven.nopublish}">
      <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file" />
      <arg value="-Durl=${maven-staging-repository-url}" />
      <arg value="-DrepositoryId=${maven-staging-repository-id}" />
      <arg value="-DpomFile=${pom.file}"/>
      <arg value="-Dfile=${maven-jar}.jar"/>
      <arg value="-Dsources=${maven-jar}-sources.jar"/>
      <arg value="-Djavadoc=${maven-jar}-javadoc.jar"/>
      <arg value="-Pgpg" />
    </artifact:mvn>
  </target>

  <target name="gpg.sign" depends="">
    <exec executable="gpg">
      <arg value="--yes"/>
      <arg value="--passphrase"/>
      <arg value="${gpg.pass}"/>
      <arg value="--armor"/>
      <arg value="--detach-sign"/>
      <arg value="${file.sign}"/>
    </exec>
  </target>

</project> 
