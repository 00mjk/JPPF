<!--
  JPPF
  Copyright (C) 2005-2019 JPPF Team. 
  http://www.jppf.org

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<project name="JPPF-docker" basedir=".." xmlns:if="ant:if" xmlns:unless="ant:unless">

  <property name="docker.registry" value="jppfgrid"/>

  <!-- ========================================================================= -->
  <!-- Build docker images for JPPF                                              -->
  <!-- ========================================================================= -->
  
  <target name="build.docker.images" depends="detect.docker" if="${docker.installed}" description="build docker images">
    <antcall target="build.docker.images.internal"/>
  </target>
  <target name="build.docker.images.internal" depends="docker.driver.image.internal, docker.node.image.internal, docker.admin-web.image" if="${docker.installed}"/>

  <!-- ========================================================================= -->
  <!-- Determine whether docker is installed by attempting 'docker -v'           -->
  <!-- and checking the exit code.                                               -->
  <!-- ========================================================================= -->

  <target name="detect.docker">
    <exec dir="${basedir}" executable="docker" failonerror="false" failifexecutionfails="false" resultproperty="docker.exit.code">
      <arg value="-v"/>
    </exec>
    <condition property="docker.installed" else="false">
      <equals arg1="0" arg2="${docker.exit.code}"/>
    </condition>
    <echo message="docker.installed = ${docker.installed}"/>
  </target>

  <!-- ========================================================================= -->
  <!-- Push the JPPF docker images to docker hub                                 -->
  <!-- ========================================================================= -->
  
  <target name="push.docker.images" depends="detect.docker" if="${docker.installed}" description="psuh the JPPF docker images">
    <docker.login/>
    <docker.push comp="driver"/>
    <docker.push comp="node"/>
    <docker.push comp="admin-web"/>
  </target>

  <!-- ========================================================================= -->
  <!-- Build the driver docker image                                             -->
  <!-- ========================================================================= -->
  
  <target name="docker.driver.image" depends="detect.docker" if="${docker.installed}" description="build the JPPF driver docker image">
    <antcall target="docker.driver.image.internal"/>
  </target>

  <target name="docker.driver.image.internal" depends="build, runtime.driver" if="${docker.installed}">
    <docker.build comp="driver"/>
  </target>

  <!-- ========================================================================= -->
  <!-- Build the node docker image                                               -->
  <!-- ========================================================================= -->
  
  <target name="docker.node.image" depends="detect.docker" if="${docker.installed}" description="build the JPPF node docker image">
    <antcall target="docker.node.image.internal"/>
  </target>

  <target name="docker.node.image.internal" depends="build, runtime.node" if="${docker.installed}">
    <docker.build comp="node"/>
  </target>

  <!-- ========================================================================= -->
  <!-- Build the web admin console docker image                                  -->
  <!-- ========================================================================= -->
  
  <target name="docker.admin-web.image" depends="admin.web">
    <delete dir="${build}/docker" quiet="true"/>
    <mkdir dir="${build}/docker"/>
    <mkdir dir="${build}/docker/ROOT"/>
    <unzip dest="${build}/docker/ROOT" src="${admin-web}/build/jppf-admin-web-${version.number}.war"/>
    <delete quiet="true">
      <fileset dir="${build}/docker/ROOT/WEB-INF/classes" includes="jppf.properties,log4j.properties"/>
    </delete>
    <copy todir="${build}/docker/ROOT/WEB-INF/classes">
      <fileset dir="${bin}/docker/admin-web" includes="*.properties"/>
      <fileset dir="${bin}/docker" includes="utils.properties"/>
    </copy>
    <copy todir="${build}/docker">
      <fileset dir="${bin}/docker/admin-web" includes="Dockerfile"/>
    </copy>
    <replace file="${build}/docker/Dockerfile" token="@version@" value="${version.number}"/>
    <exec dir="${build}/docker" executable="docker" failonerror="true">
      <arg value="build"/>
      <arg value="--tag=${docker.registry}/jppf-admin-web:${version.number}"/>
      <arg value="."/>
    </exec>
  </target>

  <!-- ========================================================================= -->
  <!-- Macrodefs                                                                 -->
  <!-- ========================================================================= -->

  <!--
    Build a docker image that runs a JPPF component.
    Attributes:
    - comp: the JPFP component for which to build an image, should be 'driver' or 'node'
  -->
  <macrodef name="docker.build">
    <attribute name="comp"/>
    <sequential>
      <delete dir="${build}/docker" quiet="true"/>
      <mkdir dir="${build}/docker"/>
      <!-- decompress JPPF-x.y.z-comp.zip and copy only the necessary files to the image context -->
      <local name="zip.name"/>
      <property name="zip.name" value="${app.ver}-@{comp}"/>
      <unzip dest="${build}/docker" src="${build}/${zip.name}.zip"/>
      <delete dir="${build}/docker/${zip.name}/bin" quiet="true"/>
      <delete dir="${build}/docker/${zip.name}/lib-src" quiet="true"/>
      <delete quiet="true">
        <fileset dir="${build}/docker/${zip.name}" includes="*.*,JPPFDriver,JPPFNode,config/*.properties" excludes="LICENSE.txt"/>
      </delete>
      <copy todir="${build}/docker/${zip.name}">
        <fileset dir="${bin}/docker/@{comp}" includes="start-@{comp}.sh"/>
      </copy>
      <copy todir="${build}/docker/${zip.name}/config">
        <fileset dir="${bin}/docker/@{comp}" includes="*.properties"/>
        <fileset dir="${bin}/docker" includes="utils.properties"/>
      </copy>
      <copy todir="${build}/docker">
        <fileset dir="${bin}/docker/@{comp}" includes="Dockerfile"/>
      </copy>
      <replace file="${build}/docker/Dockerfile" token="@version@" value="${version.number}"/>
      <exec dir="${build}/docker" executable="docker" failonerror="true">
        <arg value="build"/>
        <arg value="--tag=${docker.registry}/jppf-@{comp}:${version.number}"/>
        <arg value="."/>
      </exec>
    </sequential>
  </macrodef>

  <!--
    Push an image to Docker hub.
    Attributes:
    - comp: the JPFP component for which to build an image, should be 'driver' or 'node'
  -->
  <macrodef name="docker.push">
    <attribute name="comp"/>
    <sequential>
      <echo message="pushing '${docker.registry}/jppf-@{comp}:${version.number}'"/>
      <exec dir="${build}/docker" executable="docker" failonerror="true">
        <arg value="push"/>
        <arg value="${docker.registry}/jppf-@{comp}:${version.number}"/>
      </exec>
    </sequential>
  </macrodef>

  <!--
    Login to the jppf docker registry.
  -->
  <macrodef name="docker.login">
    <sequential>
      <exec dir="${build}/docker" executable="docker" failonerror="true">
        <arg value="login"/>
        <arg value="-u=${env.DOCKER_HUB_USER}"/>
        <arg value="-p=${env.DOCKER_HUB_PWD}"/>
      </exec>
    </sequential>
  </macrodef>

  <!-- ========================================================================= -->
  <!-- Targets for testing docker commands                                       -->
  <!-- ========================================================================= -->
  
  <target name="docker.test" depends="detect.docker" if="${docker.installed}">
    <antcall target="docker.test.internal"/>
  </target>

  <target name="docker.test.internal" depends="build" if="${docker.installed}">
    <echo message="!!! docker not installed !!!" unless:true="${docker.installed}"/>
    <echo message="!!! docker is installed !!!" if:true="${docker.installed}"/>
  </target>

</project> 
