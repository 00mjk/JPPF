<!--
	JPPF
	Copyright (C) 2005-2014 JPPF Team. 
	http://www.jppf.org

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

		 http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
-->

<project name='dotnet-bridge' basedir="." default="build">

	<!-- ========================================================================= -->
	<!-- Property definitions                                                      -->
	<!-- ========================================================================= -->

	<property name="config.dir"        value="${basedir}/config"/>
  <property name="classes.dir"       value="${basedir}/classes"/>
	<property name="classes-node.dir"  value="${basedir}/classes-node"/>
	<property name="src.dir"           value="${basedir}/src"/>
  <property name="build.dir"         value="${basedir}/build"/>
  <property name="jni4net.dir"       value="${basedir}/jni4net"/>
  <property name="work.dir"          value="${jni4net.dir}/work"/>
  <property name="javadoc"           value="${basedir}/javadoc"/>
  <property name="csdoc"             value="${basedir}/csdoc"/>

  <property file="${basedir}/build.properties"/>

	<!-- ========================================================================= -->
	<!-- Classpath definitions                                                     -->
	<!-- ========================================================================= -->

	<path id="project.classpath">
    <pathelement location="${classes.dir}"/>
    <pathelement location="${classes-node.dir}"/>
    <pathelement location="${config.dir}"/>
    <fileset dir="${jni4net.home}/lib" includes="*.jar"/>
    <pathelement location="${basedir}/../common/classes"/>
    <pathelement location="${basedir}/../node/classes"/>
    <pathelement location="${basedir}/../client/classes"/>
    <pathelement location="${basedir}/../JPPF/lib/slf4j/slf4j-api-1.6.1.jar"/>
    <pathelement location="${basedir}/../JPPF/lib/jmxremote/jppf-jmxremote_optional-1.1.jar"/>
	</path>

	<path id="run.classpath">
		<pathelement location="${config.dir}"/>
		<pathelement location="${classes.dir}"/>
		<fileset dir="${shared.lib}" includes="**/*.jar"/>
	</path>

  <path id="javadoc.classpath">
		<pathelement location="${shared.img}"/>
    <path refid="project.classpath"/>	
  </path>

	<!-- ========================================================================= -->
	<!-- Clean                                                                     -->
	<!-- ========================================================================= -->

  <target name="clean.main">
    <delete quiet="true" dir="${classes.dir}" includes="**/*.*"/>
    <delete quiet="true" dir="${build.dir}" includes="**/*.*"/>
  </target>               

	<!-- ========================================================================= -->
	<!-- Init                                                                      -->
	<!-- ========================================================================= -->

	<target name="init">
    <condition property="doxygen.present">
      <available file="${doxygen.home}/bin/doxygen.exe" property=""/>
    </condition>
	</target>

	<!-- ========================================================================= -->
	<!-- Build                                                                     -->
	<!-- ========================================================================= -->

  <target name="build" depends="build.apis, build.demo, doxygen" description="build all"/>
  <target name="build.nodoc" depends="build.apis, build.demo" description="build all except C# doc"/>

  <target name="build.init" depends="">
    <delete quiet="true" dir="${work.dir}"/>
    <mkdir dir="${work.dir}"/>
    <copy todir="${build.dir}" overwrite="true">
      <fileset dir="${basedir}/lib" includes="*.*"/> 
    </copy>
    <copy todir="${build.dir}" file="${config.dir}/JPPFDotnetDemo.exe.config" overwrite="true"/>
  </target>

  <target name="build.apis" depends="jar, build.init" description="build the jppf java and .Net APIs">
    <!-- build the .Net proxies for the JPPF Java APIs -->
    <clean outdir="${jni4net.dir}/fromjava" libname="jppf.api"/>
    <proxygen outdir="${jni4net.dir}/fromjava" libname="jppf.api"/>
    <csc srcdir="${jni4net.dir}/fromjava" libname="jppf.api"/>
    <build outdir="${jni4net.dir}/fromjava" libname="jppf.api"/>

    <!-- build the DLL for the .Net JPPF APIs -->
    <csc srcdir="${jni4net.dir}/cs/jppf.dotnet.api" libname="jppf.dotnet.api" refs=";${build.dir}/jppf.api.dll;System.Configuration.dll"/>
 
    <!-- build the Java proxies for the JPPF .Net APIs -->
    <clean outdir="${jni4net.dir}/fromclr" libname="jppf.dotnet.api.generated"/>
    <proxygen outdir="${jni4net.dir}/fromclr" libname="jppf.dotnet.api.generated"/>
    <csc srcdir="${jni4net.dir}/fromclr" libname="jppf.dotnet.api.generated" refs=";${build.dir}/jppf.api.dll;${build.dir}/jppf.dotnet.api.dll"/>
    <build outdir="${jni4net.dir}/fromclr" libname="jppf.dotnet.api.generated"/>
  </target>

  <target name="build.demo" depends="build.init" description="build the demo application">
    <!-- Generate the DLL for the .Net task and accompanying code that will be executed on the nodes -->
    <csc srcdir="${jni4net.dir}/cs/jppf.dotnet.demo.tasks" libname="jppf.example.tasks" refs=";${build.dir}/jppf.api.dll;${build.dir}/jppf.dotnet.api.dll;${build.dir}/jppf.dotnet.api.generated.dll"/>

    <!-- Generate the demo .Net application executable -->
    <csc srcdir="${jni4net.dir}/cs/jppf.dotnet.demo" libname="JPPFDotnetDemo"
      refs=";${build.dir}/jppf.api.dll;${build.dir}/jppf.example.tasks.dll;${build.dir}/jppf.dotnet.api.dll;${build.dir}/jppf.dotnet.api.generated.dll" target="exe"/>
    <copy file="${config.dir}/JPPFDotnetDemo.exe.config" todir="${build.dir}"/>
  </target>

  <!-- ========================================================================= -->
  <!-- Generate with jni4net                                                     -->
  <!-- ========================================================================= -->

  <!-- cleanup the build folders
    Attributes:
      - outdir: the base directory where files are generated
      - libname: suffix of the generated jars and dlls to delete
   -->
  <macrodef name="clean">
    <attribute name="outdir"/>
    <attribute name="libname"/>
    <sequential>
      <delete quiet="true" dir="@{outdir}/java/src"/>
      <delete quiet="true" dir="@{outdir}/java/classes"/>
      <delete quiet="true" dir="@{outdir}/cs"/>
      <delete quiet="true" dir="${jni4net.dir}" includes="@{libname}.dll,@{libname}.jar"/>
      <mkdir dir="@{outdir}/cs"/>
      <mkdir dir="@{outdir}/java"/>
      <mkdir dir="@{outdir}/java/src"/>
      <mkdir dir="@{outdir}/java/classes"/>
    </sequential>
  </macrodef>

  <!-- generate java and/or CLR proxies with proxygen.exe
    Attributes:
      - outdir: the base directory where files are generated
      - libname: suffix of the proxygen config file
   -->
  <macrodef name="proxygen">
    <attribute name="outdir"/>
    <attribute name="libname"/>
    <sequential>
      <local name="proxygen.file"/>
      <property name="proxygen.file" value="${work.dir}/@{libname}.proxygen.xml"/>
      <copy toFile="${proxygen.file}" file="${jni4net.dir}/@{libname}.proxygen.xml"/>
      <replace file="${proxygen.file}">
        <replacefilter token="@outdir@"          value="@{outdir}"/>
        <replacefilter token="@jni4net.version@" value="${jni4net.version}"/>
        <replacefilter token="@jni4net.home@"    value="${jni4net.home}"/>
      </replace>
      <exec executable="${jni4net.home}/bin/proxygen.exe" failonerror="true">
        <arg value="${proxygen.file}"/>
      </exec>
      <delete file="${proxygen.file}"/>
    </sequential>
  </macrodef>

  <!-- compile the C# files and build an assembly dll or executable
    Attributes:
     - srcdir: the base directory where the .cs files are
     - libname: suffix given to generated dll or exe
     - refs: optional semicolumn-separated list of assembly references
             if not empty, then it must start with a semicolumn
     - target: the type of target to generate: "library" or "exe"
  -->
  <macrodef name="csc">
    <attribute name="srcdir"/>
    <attribute name="libname"/>
    <attribute name="refs" default=""/>
    <attribute name="target" default="library"/>
    <sequential>
      <local name="ext"/>
      <condition property="ext" value="dll" else="exe">
        <equals arg1="@{target}" arg2="library"/>
      </condition>
      <exec executable="${jni4net.dir}/runcsc.bat" failonerror="true" searchpath="true">
        <env key="VS_TOOLS_DIR" path="${vs.tools.dir}"/>
        <arg value="/nologo"/>
        <arg value="/warn:0"/>
        <arg value="/reference:${jni4net.home}\\lib\\jni4net.n-${jni4net.version}.dll@{refs}"/>
        <!--
        <arg value="/out:${jni4net.dir}\\@{libname}.${ext}"/>
        <arg value="/doc:${jni4net.dir}\\@{libname}.xml"/>
        -->
        <arg value="/out:${build.dir}\\@{libname}.${ext}"/>
        <arg value="/doc:${build.dir}\\@{libname}.xml"/>
        <arg value="/target:@{target}"/>
        <arg value="/recurse:@{srcdir}\\cs\\*.cs"/>
      </exec>
    </sequential>
  </macrodef>

  <!-- compile and jar the Java proxies
    Attributes:
     - outdir: the base directory where java files were generated
     - libname: suffix given to generated jar file
  -->
  <macrodef name="build">
    <attribute name="outdir"/>
    <attribute name="libname"/>
    <sequential>
      <javac srcdir="" destdir="@{outdir}/java/classes" source="1.7" target="1.7" debug="on" deprecation="off" optimize="on" includes="**/*.java">
        <!--<classpath refid="project.classpath"/>-->
        <classpath>
          <pathelement location="${classes.dir}"/>
          <pathelement location="${classes-node.dir}"/>
          <pathelement location="${config.dir}"/>
          <fileset dir="${jni4net.home}/lib" includes="*.jar"/>
          <pathelement location="${basedir}/../common/classes"/>
          <pathelement location="${basedir}/../node/classes"/>
          <pathelement location="${basedir}/../client/classes"/>
          <pathelement location="${basedir}/../JPPF/lib/slf4j/slf4j-api-1.6.1.jar"/>
          <pathelement location="${basedir}/../JPPF/lib/jmxremote/jppf-jmxremote_optional-1.1.jar"/>
        </classpath>
        <compilerarg line="-Xlint:-unchecked"/>
        <src path="@{outdir}/java/src"/>
      </javac>
      <jar jarfile="${build.dir}/@{libname}.jar" index="true">
        <fileset dir="@{outdir}/java/classes"/>
      </jar>
      <echo message="*** The file @{libname}.jar is now ready to be deployed ***"/>
    </sequential>
  </macrodef>

	<!-- ========================================================================= -->
	<!-- Compile / Jar                                                                  -->
	<!-- ========================================================================= -->

  <target name="jar" depends="clean.main, init">
    <javac srcdir="" destdir="${classes.dir}" source="1.7" target="1.7"
      debug="on" deprecation="off" optimize="on" includes="**/*.java">
      <classpath refid="project.classpath"/>
      <compilerarg line="-Xlint:unchecked"/>
      <src path="${src.dir}"/>
    </javac>
    <jar jarfile="${build.dir}/${ant.project.name}.jar" index="true">
      <fileset dir="${classes.dir}"/>
    </jar>
    <echo message="*** The file ${ant.project.name}.jar is now ready to be deployed ***"/>
  </target>

  <!-- ========================================================================= -->
  <!-- Generate the C# code documentation with Doxygen                           -->
  <!-- ========================================================================= -->

  <target name="doxygen" depends="init" if="doxygen.present" description="CS documentation with Doxygen">
    <mkdir dir="${csdoc}"/>
    <delete quiet="true" dir="${csdoc}/html"/>
    <exec executable="${doxygen.home}/bin/doxygen.exe" failonerror="true" searchpath="true">
      <arg value="${config.dir}/doxygen.properties"/>
    </exec>
  </target>

	<!-- ========================================================================= -->
	<!-- Generate the Javadoc                                                      -->
	<!-- ========================================================================= -->

	<target name="javadoc">
    <delete dir="${javadoc}" quiet="true"/>
    <mkdir dir="${javadoc}"/>
		<javadoc destdir="${javadoc}" access="private" Windowtitle="JPPF"
			packagenames="**/*.*" classpathref="javadoc.classpath" verbose="false" use="true"
			stylesheetfile="${shared.img}/javadoc.css" additionalparam="-quiet">
			<packageset dir="${src.dir}"/>
      <link href="https://docs.oracle.com/javase/7/docs/api"/>
			<link href="http://www.jppf.org/api-5"/>
			<doctitle><![CDATA[JPPF - dotnet-bridge]]></doctitle>
			<header>
				<![CDATA[
					<table><tr><td valign="center">
						<a href="http://www.jppf.org" target="_top">
							<img src="http://www.jppf.org/images/jppf_group_large.gif" border="0"/>
						</a>
					</td></tr></table>
				]]>
			</header>
			<bottom>
				<![CDATA[
					<font face="Arial" size=2 color="#6D78B6"><i>Copyright &copy; 2005-2014 JPPF Team.</i></font>
				]]>
			</bottom>
		</javadoc>
		<copy todir="${javadoc}/resources" overwrite="true">
			<fileset dir="${shared.img}" includes="inherit.gif"/>
		</copy>
	</target>

</project> 
