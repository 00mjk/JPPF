namespace org.jppf.dotnet {
  using System;
  using System.Collections.Specialized;
  using System.Configuration;
  using net.sf.jni4net;

  /// <summary>Extensions to the C# proxy classes generated by jni4net for the JPPF Java APIs.</summary>
  public static class JPPFDotnet {
    /// <summary>Initialize the jni4net bridge, including creation of the JVM, loading of the appropriate jar files
    /// and registration of the .Net DLLs, with no ocnosle output.</summary>
    public static void Init() {
      JPPFDotnet.Init(false);
    }

    /// <summary>Initialize the jni4net bridge, including creation of the JVM, loading of the appropriate jar files
    /// and registration of the .Net DLLs.</summary>
    /// <param name="verbose">whether this method should output verbose statements to the conosle, for debugging puproses</param>
    public static void Init(bool verbose) {
      if (verbose) Console.WriteLine("[JPPFDotnet.Init()]");
      BridgeSetup bridgeSetup = new BridgeSetup(true);
      NameValueCollection settings = ConfigurationManager.AppSettings;
      foreach (string key in settings.AllKeys) {
        //if (verbose) Console.WriteLine("[JPPFDotnet.Init() : processing " + key + " = " + settings[key]);
        if (key.StartsWith("ClassPath.")) {
          if (verbose) Console.WriteLine("[JPPFDotnet.Init()] adding single classpath for key = '" + key + "' : " + settings[key]);
          bridgeSetup.AddClassPath(settings[key]);
        } else if (key.StartsWith("ClassPaths.")) {
          string[] parsed = settings[key].Split('|');
          if (verbose) Console.WriteLine("[JPPFDotnet.Init()] adding multiple classpaths for key = '" + key + "' : dir = '" + parsed[0] + "', paths = " + parsed[1]);
          bridgeSetup.AddClassPaths(parsed[0], parsed[1]);
        }
      }
      if (verbose) {
        Console.WriteLine("[JPPFDotnet.Init()] bridgeSetup : " + bridgeSetup.JVMCLassPath);
        foreach (String s in bridgeSetup.JVMCLassPath) Console.WriteLine(s);
      }
      Bridge.CreateJVM(bridgeSetup);
      foreach (string key in settings.AllKeys) {
        if (key.StartsWith("AssemblyPath.")) {
          if (verbose) Console.WriteLine("[JPPFDotnet.Init()] adding single assembly for key = '" + key + "' : " + settings[key]);
          Bridge.LoadAndRegisterAssemblyByName(settings[key]);
        } else if (key.StartsWith("AssemblyPaths.")) {
          string[] parsed = settings[key].Split('|');
          if (verbose) Console.WriteLine("[JPPFDotnet.Init()] registering multiple assemblies for key = '" + key + "' : dir = '" + parsed[0] + "', paths = " + parsed[1]);
          Bridge.LoadAndRegisterAssemblyByName(parsed[0] + "\\" + parsed[1]);
        }
      }
      /*
      Bridge.RegisterAssembly(typeof(java.lang.Runnable).Assembly);
      Bridge.RegisterAssembly(typeof(org.jppf.client.JPPFClient).Assembly);
      Bridge.RegisterAssembly(typeof(org.jppf.dotnet.BaseDotnetJobListener).Assembly);
      Bridge.LoadAndRegisterAssemblyByName("jppf.dotnet.api.generated");
      */
    }
  }
}
