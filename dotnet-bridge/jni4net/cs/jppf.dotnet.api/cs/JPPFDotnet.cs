/*
 * JPPF.
 * Copyright (C) 2005-2014 JPPF Team.
 * http://www.jppf.org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace org.jppf.dotnet {
  using System;
  using System.Collections.Specialized;
  using System.Configuration;
  using System.IO;
  using net.sf.jni4net;

  /// <summary>Extensions to the C# proxy classes generated by jni4net for the JPPF Java APIs.</summary>
  public static class JPPFDotnet {
    /// <summary>Initialize the jni4net bridge, including creation of the JVM, loading of the appropriate jar files
    /// and registration of the .Net DLLs, with no ocnosle output.</summary>
    public static void Init() {
      JPPFDotnet.Init(false);
    }

    /// <summary>Initialize the jni4net bridge, including creation of the JVM, loading of the appropriate jar files
    /// and registration of the .Net DLLs.</summary>
    /// <param name="verbose">whether this method should output verbose statements to the conosle, for debugging puproses</param>
    public static void Init(bool verbose) {
      if (verbose) Console.WriteLine("[JPPFDotnet.Init()]");
      NameValueCollection settings = ConfigurationManager.AppSettings;
      string jvmOptions = settings["jppf.jvm.option"];

      BridgeSetup bridgeSetup = (jvmOptions != null) ? new BridgeSetup(jvmOptions) : new BridgeSetup(true);

      foreach (string key in settings.AllKeys) {
        //if (verbose) Console.WriteLine("[JPPFDotnet.Init() : processing " + key + " = " + settings[key]);
        if (key.StartsWith("ClassPath.")) {
          if (verbose) Console.WriteLine("[JPPFDotnet.Init()] adding single classpath for key = '" + key + "' : " + settings[key]);
          bridgeSetup.AddClassPath(settings[key]);
        } else if (key.StartsWith("ClassPaths.")) {
          string[] parsed = settings[key].Split('|');
          if (verbose) Console.WriteLine("[JPPFDotnet.Init()] adding multiple classpaths for key = '" + key + "' : dir = '" + parsed[0] + "', paths = " + parsed[1]);
          bridgeSetup.AddClassPaths(parsed[0], parsed[1]);
        } else if (key.StartsWith("ClassPathDir.")) {
          string[] files = Directory.GetFiles(settings[key]);
          foreach (string file in files) {
            FileInfo info = new FileInfo(file);
            bool isDirectory = (info.Attributes & FileAttributes.Directory) == FileAttributes.Directory;
            if (isDirectory || file.EndsWith(".jar") || file.EndsWith(".zip")) {
              if (verbose) Console.WriteLine("[JPPFDotnet.Init()] adding classpath for key = '" + key + "' : " + (isDirectory ? "dir" : "file") + " = '" + file);
              bridgeSetup.AddClassPath(file);
            }
          }
        }
      }
      if (verbose) {
        Console.WriteLine("[JPPFDotnet.Init()] bridgeSetup : " + bridgeSetup.JVMCLassPath);
        foreach (String s in bridgeSetup.JVMCLassPath) Console.WriteLine(s);
      }

      Bridge.CreateJVM(bridgeSetup);
      foreach (string key in settings.AllKeys) {
        if (key.StartsWith("AssemblyPath.")) {
          if (verbose) Console.WriteLine("[JPPFDotnet.Init()] adding single assembly for key = '" + key + "' : " + settings[key]);
          Bridge.LoadAndRegisterAssemblyByName(settings[key]);
        } else if (key.StartsWith("AssemblyPaths.")) {
          string[] parsed = settings[key].Split('|');
          if (verbose) Console.WriteLine("[JPPFDotnet.Init()] registering multiple assemblies for key = '" + key + "' : dir = '" + parsed[0] + "', paths = " + parsed[1]);
          Bridge.LoadAndRegisterAssemblyByName(parsed[0] + "\\" + parsed[1]);
        }
      }
    }
  }
}
